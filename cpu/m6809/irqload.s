
	;; This function measures the amount of CPU load generated by the IRQ
	;; handler.

		.module irqload

		.area ram
start_time:: .blkw 1
loop_count:: .blkw 1

		.area .text
		.globl _measure_irq_load
	_measure_irq_load::
		clr	loop_count
		clr	loop_count+1
		ldd	_sys_time
		std	start_time

		; ----------------------------------------
		; Begin main loop.
		; ----------------------------------------
		lda	#1
	loop:
		; 256 loops very quickly =
		; 256*9=2304 cycles.  Counting the extra
		; instructions, total for 256 loops
		; is 2317 cycles.
		inc	loop_count+1        ; 7 cycles
		bne	loop                ; 2 cycles

		; Reset software watchdog every 256 loops.
		sta	*_task_dispatching_ok  ; 4 cycles

		; Continue main loop = 5 cycles
		inc	loop_count             ; 7 cycles
		bne	loop                   ; 2 cycles

		; End main loop.  We ran 256 outer loops
		; so the total run time is 256*2317 = 593152 cycles.
		; Divided by 2047, that's about 289.75ms of actual runtime here.

		; Compute load.
		; end_time - start_time says how many 16ms ticks occurred during
		; the run.  At 60 ticks/sec, over 290ms, we would expect to see
		; at least 17 ticks.
		; total CPU time.
		ldd	_sys_time
		subd	start_time
		std	_sched_test_count
		; IRQ load = (16.66*D - 290) / (16.66*D)
		rts

