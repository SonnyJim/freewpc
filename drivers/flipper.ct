/*
 * Copyright 2008, 2009 by Brian Dominy <brian@oddchange.com>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * Fliptronic Flipper driver
 *
 * It is a more specific version of the special solenoid driver.
 *
 * id is the flipper number (0-3).
 */

@@class flipper
@@parameter id

@@
@@file @class.h
@@

#ifndef __@class_DRIVER_H
#define __@class_DRIVER_H

extern __fastram__ U8 @class_enabled;
extern __fastram__ U8 @class_running;
extern __fastram__ U8 @class_duty;


/**
 * Every millisecond, rewrite the flipper output.
 */
extern inline void @self_1ms_service (void)
{
	wpc_write_flippers ((@class_duty & @class_duty_mask[0]) | @class_enabled);
}

#endif /* __@class_DRIVER_H */


@@
@@file @self.h
@@

#include <@class.h>

#undef INST_MASK
#define INST_MASK (1 << @instance)

#undef SOL_POWER
#define SOL_POWER (32 + @instance * 2)
#undef SOL_HOLD
#define SOL_HOLD (32 + @instance * 2 + 1)

#undef SW_EOS
#define SW_EOS (72 + @instance * 2)
#undef SW_BUTTON
#define SW_BUTTON (72 + @instance * 2 + 1)

extern __fastram__ U8 @self_timer;

extern inline U8 @self_enabled_p (void)
{
	return @class_enables & INST_MASK;
}


extern inline U8 @self_running_p (void)
{
	return @class_running & INST_MASK;
}


extern inline void @self_8ms_service (void)
{
}


@@
@@file @self.c
@@

#include <freewpc.h>
#include <@self.h>

@@classvar __fastram__ U8 @class_enabled;
@@classvar __fastram__ U8 @class_running;
@@classvar __fastram__ U8 @class_duty;

__fastram__ U8 @self_timer;

/* Initialize the device */
CALLSET_ENTRY (@self, init)
{
	@self_timer = 0;
	flippers_enabled = 0;
}

/* Enable the device at start ball */
CALLSET_ENTRY (@self, start_ball)
{
	flippers_enabled = 1;
}

/* Disable the device at end ball/tilt */
CALLSET_ENTRY (@self, end_ball)
{
	flippers_enabled = 0;
}

CALLSET_ENTRY (@self, tilt)
{
	flippers_enabled = 0;
}

/* vim: set filetype=c: */
