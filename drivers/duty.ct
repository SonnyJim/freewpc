/*
 * Copyright 2008 by Brian Dominy <brian@oddchange.com>
 *
 * This file is part of FreeWPC.
 *
 * FreeWPC is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * FreeWPC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FreeWPC; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/*
 * Generic duty cycle driver
 *
 * This driver implements a device which is software-enabled
 * and must be constantly on for long periods of time.  It
 * supports duty cycling to avoid smoke :) and a fixed "on"
 * time at enable.
 */

@@class duty
@@parameter sol
@@parameter ontime
@@parameter duty_ontime
@@parameter duty_offtime
@@parameter timeout

@@
@@file @self.h
@@

#include <freewpc.h>

extern __fastram__ U8 @class_enables;
extern U8 @self_state;
extern U8 @self_timer;
extern U8 @self_cycles;


extern inline void @self_start (void)
{
	disable_interrupts ();
	@self_timer = @ontime;
	@self_timeout = @timeout;
	@self_state = 1;
	sol_enable (@sol);
	@class_enables |= (1 << @instance);
	enable_interrupts ();
}

extern inline void @self_stop (void)
{
	disable_interrupts ();
	@class_enables &= ~(1 << @instance);
	sol_disable (@sol);
	enable_interrupts ();
}

extern inline void @self_service (void)
{
	if (@class_enables & (1 << @instance))
	{
		if (--@self_timer == 0)
		{
			if (@self_state) /* device is on */
			{
				sol_disable (@sol);
				@self_state = 0;
				@self_timer = @duty_ontime;
			}
			else /* device is presently off */
			{
				if (@timeout)
				{
					if (--@self_cycles == 0)
						return;
				}
				sol_enable (@sol);
				@self_state++;
				@self_timer = @duty_offtime;
			}
		}
	}
}


@@
@@file @self.c
@@

#include <freewpc.h>

@@classvar __fastram__ U8 @class_enables;
U8 @self_state;
U8 @self_timer;

CALLSET_ENTRY (@self, init)
{
	@class_enables &= ~(1 << @instance);
}

/* vim: set filetype=c: */
