#!/usr/bin/perl
#
# Copyright 2012 by Brian Dominy <brian@oddchange.com>
#
# This file is part of FreeWPC.
#
# FreeWPC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# FreeWPC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FreeWPC; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# ------------------------------------------------------------------
# genrtt - generate real time task list
# ------------------------------------------------------------------
#
# Scan all source files and search them for rtt entries
# and callset invocations.
#
# The output of this script is a file build/rtt.c.
#
# RTT attributes:
# name=<function>       Entry point to the real time task
# freq=<int>            Frequency to be scheduled, in milliseconds
# depends=<function>    Function that needs to be execed first

# A list of directories to be searched.
my @SearchDirs = ();

# A list of RTT declarations
my @rtlist;

# A hash of RTTs by their function name
my %rtt_by_name;

# The output file name
$OutputFile = "build/rtt.c";

# A list of all include files that the result file will need
# to include
@IncludeFiles = ();


#############################################################
# Parse command-line arguments
#############################################################

while (my $arg = shift @ARGV) {
	if ($arg =~ /^-h/) {
		print "\nOptions:\n";
		print "-o <file>         Write C code to this file (default is build/callset.c)\n";
		print "--include <file>  Add an #include to the output file\n";
		print "\n";
		exit 0;
	}
	elsif ($arg =~ /^-o$/) {
		$OutputFile = shift @ARGV;
	}
	elsif ($arg =~ /^--include$/) {
		push @IncludeFiles, (shift @ARGV);
	}
	elsif ($arg =~ /^-i$/) {
		push @IncludeFiles, (shift @ARGV);
	}
	elsif ($arg =~ /^-D$/) {
		$arg = shift @ARGV;
	}
	else {
		push @srclist, $arg;
	}
}


#############################################################
# Build the list of all filenames to be searched.
#############################################################

foreach $dir (@SearchDirs) {
	my @files = split /\n+/,
		`cd $dir && find . -name "*.c" -or -name "*.h"`;
	foreach $file (@files) {
		push @srclist, "$dir/" . $file;
	}
}

#############################################################
# For each file, search for entries and invocations.
#############################################################

foreach $src (@srclist) {
	sub warning { print STDERR "$src:$lineno: warning: " . (shift) . "\n"; }
	sub error { print STDERR "$src:$lineno: error: " . (shift) . "\n"; die; }
	$section = "";
	if ($src =~ /(.*):(.*)/) {
		$src = $1;
		if ($2 ne "SYSTEM_PAGE") {
			$section = "__far__(C_STRING(" . $2 . "))";
		}	
	}
	open FH, $src;
	$lineno = 0;
	while (<FH>) {
		chomp;
		++$lineno;
		if (/RTT[ \t]*\(([^)]*)\)/) {
			my $rtt_args = $1;
			my $rtt = {};
			$rtt->{"priority"} = 50;
			$rtt->{"filename"} = $src;
			$rtt->{"fardecl"} = $section;

			my @attrs = split /[ \t]+/, $rtt_args;
			foreach my $attr (@attrs) {
				my ($key, $value) = split /=/, $attr;
				$rtt->{$key} = $value;
			}
			if ($rtt->{'name'} =~ /,/) {
				error "$name is invalid";
			}
			if ($rtt->{'freq'} > 255) {
				error "$name has invalid frequency";
			}
			push @rtlist, $rtt;
			$rtt_by_name{ $rtt->{'name'} } = $rtt;
		}
		elsif (/([a-z_0-9]*_rtt[a-z_0-9]*)[ \t].*void/) {
			my $name = $1;
			if (!defined $rtt_by_name{$name})
			{
				warning "found possible function '$name' without an RTT header";
			}
		}
	}
	close FH;
}

# Sort the records by increasing schedule frequency.
@rtlist = sort {
	($a->{'freq'} <=> $b->{'freq'}) ||
	($a->{'priority'} <=> $b->{'priority'})
} @rtlist;

#############################################################
# Write the output file.
#############################################################

$timervar = "sys_timer_ticks";

open FH, ">$OutputFile";
print FH "/* Automatically generated by genrtt */\n\n";
for $include (@IncludeFiles) {
	print FH "#include <$include>\n";
}
print FH"\n";

foreach $rtt (@rtlist) {
	next if ($rtt->{"inline"});
	my $fardecl = $rtt->{"fardecl"};
	print FH "extern $fardecl void " . $rtt->{"name"} . " (void);\n";
}
print FH "\n";

print FH "U8 $timervar;\n\n";

$freq = 1;
$indentsize = 3;
$indent = $indentsize;

print FH "void exec_rtt (void)\n{\n";
print FH " " x $indent;
print FH "$timervar++;\n";

foreach $rtt (@rtlist) {
	if ($rtt->{"freq"} > $freq)
	{
		$freq = $rtt->{"freq"};
		print FH "\n";
		print FH " " x $indent;
		print FH "if (($timervar & ($freq-1)) == 0) {\n";
		$indent += $indentsize;
	}
	print FH " " x $indent;
	print FH $rtt->{"name"} . "(); /* " . $rtt->{"filename"} . " */\n";
}
while ($indent > 0) {
	$indent -= $indentsize;
	print FH " " x $indent;
	print FH "}\n";
}
print FH "\n";

print FH "void rtt_init (void) {}\n\n";
close FH;

